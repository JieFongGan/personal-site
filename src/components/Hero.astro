---
import { aboutData } from "@/data/about.data";
import { Image } from "astro:assets";

// All multilingual greetings - time detection will happen on client side
const allGreetings = {
    morning: {
        en: "Good morning",
        zh: "早上好",
        ms: "Selamat pagi",
        ja: "おはようございます",
        ko: "좋은 아침이에요",
        fr: "Bonjour",
        es: "Buenos días",
        de: "Guten Morgen",
        it: "Buongiorno",
        pt: "Bom dia",
        ru: "Доброе утро",
        ar: "صباح الخير",
        hi: "सुप्रभात",
        th: "สวัสดีตอนเช้า",
        vi: "Chào buổi sáng",
    },
    afternoon: {
        en: "Good afternoon",
        zh: "下午好",
        ms: "Selamat petang",
        ja: "こんにちは",
        ko: "안녕하세요",
        fr: "Bon après-midi",
        es: "Buenas tardes",
        de: "Guten Tag",
        it: "Buon pomeriggio",
        pt: "Boa tarde",
        ru: "Добрый день",
        ar: "مساء الخير",
        hi: "नमस्कार",
        th: "สวัสดีตอนบ่าย",
        vi: "Chào buổi chiều",
    },
    night: {
        en: "Good evening",
        zh: "晚上好",
        ms: "Selamat malam",
        ja: "こんばんは",
        ko: "좋은 저녁이에요",
        fr: "Bonsoir",
        es: "Buenas noches",
        de: "Guten Abend",
        it: "Buonasera",
        pt: "Boa noite",
        ru: "Добрый вечер",
        ar: "مساء الخير",
        hi: "शुभ संध्या",
        th: "สวัสดีตอนเย็น",
        vi: "Chào buổi tối",
    },
};
---

<div class="hero min-h-screen relative">
  <div class="hero-content text-base-content text-center relative z-10">
    <div class="max-w-4xl">
      <h1 class="mb-6 text-4xl md:text-6xl lg:text-7xl xl:text-8xl font-bold">
        <span id="greeting-text"></span><br />
        I'm 
        <span
          class="whitespace-nowrap bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent inline-block leading-tight pb-1"
        >
          {aboutData.name}
        </span>
      </h1>

      <p class="mb-6 text-lg md:text-xl lg:text-2xl xl:text-3xl">
        Currently a {aboutData.title}
      </p>

      <p class="mb-6 text-base md:text-lg lg:text-xl opacity-90 flex items-center justify-center gap-2">
        <Image
          src="/Flag_of_Malaysia.webp"
          alt="Malaysia Flag"
          width={24}
          height={16}
          class="inline-block"
          loading="eager"
        />
        {aboutData.address}
      </p>
    </div>
  </div>
</div>

<style>
    /* Hero specific styles */

    /* Greeting Text Animation */
    #greeting-text {
        border-right: 2px solid currentColor;
        animation: blink 1s infinite;
    }

    @keyframes blink {
        0%,
        50% {
            border-right-color: currentColor;
        }
        51%,
        100% {
            border-right-color: transparent;
        }
    }

    .typing-complete {
        border-right: none !important;
        animation: none !important;
    }
</style>

<script define:vars={{ allGreetings }}>
    document.addEventListener("DOMContentLoaded", function () {
        const greetingElement = document.getElementById("greeting-text");
        
        // Determine time of day based on visitor's local time
        const hour = new Date().getHours();
        let timeOfDay;
        
        if (hour >= 6 && hour < 12) timeOfDay = "morning";
        else if (hour >= 12 && hour < 18) timeOfDay = "afternoon";
        else timeOfDay = "night";
        
        const greetingTexts = Object.values(allGreetings[timeOfDay]);
        let currentGreetingIndex = 0;
        let currentCharIndex = 0;
        let isDeleting = false;
        let isPaused = false;

        function typeGreeting() {
            const currentText = greetingTexts[currentGreetingIndex];

            if (!isDeleting && currentCharIndex <= currentText.length) {
                greetingElement.textContent = currentText.substring(
                    0,
                    currentCharIndex
                );
                currentCharIndex++;

                if (currentCharIndex > currentText.length) {
                    isPaused = true;
                    setTimeout(() => {
                        isPaused = false;
                        isDeleting = true;
                    }, 2000); // Pause for 2 seconds
                }
            } else if (isDeleting && currentCharIndex >= 0) {
                greetingElement.textContent = currentText.substring(
                    0,
                    currentCharIndex
                );
                currentCharIndex--;

                if (currentCharIndex < 0) {
                    isDeleting = false;
                    currentGreetingIndex =
                        (currentGreetingIndex + 1) % greetingTexts.length;
                    currentCharIndex = 0;
                }
            }

            if (!isPaused) {
                const speed = isDeleting ? 50 : 100;
                setTimeout(typeGreeting, speed);
            } else {
                setTimeout(typeGreeting, 100);
            }
        }

        typeGreeting();
    });
</script>
