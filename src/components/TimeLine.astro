---
import { careerData } from '@/data/career.data';
import { LuGraduationCap, LuBriefcase, LuBuilding2 } from 'react-icons/lu';
---

<ul class="timeline timeline-snap-icon max-md:timeline-compact timeline-vertical">
  {careerData.map((item, index) => {
    const isEven = index % 2 === 0;
    const timelinePosition = isEven ? 'timeline-start' : 'timeline-end';
    const textAlign = isEven ? 'md:text-end' : '';
    
    return (
      <li>
        {index > 0 && <hr />}
        <div class="timeline-middle">
          {item.category === 'education' && <LuGraduationCap className="h-5 w-5" />}
          {item.category === 'internship' && <LuBriefcase className="h-5 w-5" />}
          {item.category === 'job' && <LuBuilding2 className="h-5 w-5" />}
        </div>
        <div class={`${timelinePosition} mb-10 ${textAlign}`}>
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <div class={`flex items-center gap-2 mb-2 ${isEven ? 'md:justify-end' : ''}`}>
                <div class={`badge rounded-full ${
                  item.category === 'education' ? 'badge-primary' :
                  item.category === 'internship' ? 'badge-secondary' :
                  item.category === 'job' ? 'badge-accent' : 'badge-neutral'  
                }`}>
                  {item.category}
                </div>
                {item.isCurrent && <div class="badge badge-success rounded-full">Current</div>}
              </div>
              <time class="font-mono italic text-base">
                {item.startDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })}
                {' - '}
                {item.isCurrent ? 'Present' : item.endDate?.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })}
              </time>
              <div class="text-2xl font-black">{item.title}</div>
              {item.organization && (
                <div class="text-lg font-semibold text-primary">
                  {item.organizationUrl ? (
                    <a href={item.organizationUrl} target="_blank" rel="noopener noreferrer" class="link">
                      {item.organization}
                    </a>
                  ) : (
                    item.organization
                  )}
                </div>
              )}
              {item.location && (
                <div class="text-base text-base-content/70">{item.location}</div>
              )}
              <div class="mt-3 text-base" set:html={item.description} />
              {item.learnedSkills && item.learnedSkills.length > 0 && (
                <div class="mt-4">
                  <div class="text-base font-semibold mb-2">Skills Learned:</div>
                  <div class={`flex flex-wrap gap-2 ${isEven ? 'md:justify-end' : ''}`}>
                    {item.learnedSkills.map((skill) => {
                      const IconComponent = skill.icon;
                      return (
                        <div class="tooltip tooltip-top md:tooltip-bottom" data-tip={skill.name}>
                          <div class={`btn btn-md btn-ghost ${skill.style || ''}`}>
                            <IconComponent className="w-5 h-5" />
                            <span class="ml-1 text-sm">{skill.name}</span>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        {index < careerData.length - 1 && <hr />}
      </li>
    );
  })}
</ul>